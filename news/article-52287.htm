<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://passwall2.github.io/news/article-52287.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>springboot 定义统一返回结果</title>
        <meta name="description" content="前后端分离项目中后端开发需要写相应的接口，定义统一的返回格式有利于提高开发效率和沟通的成本。通常返回的格式主要如下两种： 1.&nbsp;&nbsp; &nbsp;只返回相应的状态，格式如下： { &" />
        <link rel="icon" href="/assets/website/img/passwall2/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Pass Wall2机场订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://passwall2.github.io/news/article-52287.htm" />
    <meta property="og:site_name" content="Pass Wall2机场订阅官网" />
    <meta property="og:title" content="springboot 定义统一返回结果" />
    <meta property="og:image" content="https://passwall2.github.io/uploads/20240825/9215ec70bb164dbea030e073a6fd3be3.webp" />
        <meta property="og:release_date" content="2025-02-06T05:30:13" />
    <meta property="og:updated_time" content="2025-02-06T05:30:13" />
        <meta property="og:description" content="前后端分离项目中后端开发需要写相应的接口，定义统一的返回格式有利于提高开发效率和沟通的成本。通常返回的格式主要如下两种： 1.&nbsp;&nbsp; &nbsp;只返回相应的状态，格式如下： { &" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="springboot 定义统一返回结果">
    <meta name="format-detection" content="telephone=no">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://cdn.bootcdn.net">
    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://cdn.bootcdn.net">
    <link rel="dns-prefetch" href="https://use.fontawesome.com">

    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Inter:slnt,wght@-10..0,100..900&display=swap" rel="stylesheet">
    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <link href="https://cdn.bootcdn.net/ajax/libs/bootstrap-icons/1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Libraries Stylesheet -->
    <link rel="stylesheet" href="/assets/website/js/frontend/passwall2/animate/animate.min.css" />
    <link href="/assets/website/js/frontend/passwall2/lightbox/css/lightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/passwall2/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <!-- Customized Bootstrap Stylesheet -->
    <link href="/assets/website/css/passwall2/bootstrap.min.css" rel="stylesheet">
    <!-- Template Stylesheet -->
    <link href="/assets/website/css/passwall2/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-BD8TLG2ND4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-BD8TLG2ND4');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Spinner Start -->
    <div id="spinner" class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <!-- Spinner End -->
    <!-- Navbar & Hero Start -->
    <div class="container-fluid nav-bar px-0 px-lg-4 py-lg-0">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                <a href="/" class="navbar-brand p-0">
                                <span class="text-primary mb-0">Pass Wall2</span>
                                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                    <span class="fa fa-bars"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarCollapse">
                    <div class="navbar-nav mx-0 mx-lg-auto">
                                                <a href="/" class="nav-item nav-link">首页</a>
                                                <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                                <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                                <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                                <a href="#" class="nav-item nav-link">关于</a>
                        <a href="#" class="nav-item nav-link">联系</a>
                    </div>
                </div>
            </nav>
        </div>
    </div>
    <!-- Navbar & Hero End -->

    <!-- Header Start -->
    <div class="container-fluid bg-breadcrumb">
        <div class="container text-center py-5" style="max-width: 900px;">
            <h1 class="text-white display-4 mb-4 wow fadeInDown" data-wow-delay="0.1s">springboot 定义统一返回结果</h1>
            <ol class="breadcrumb d-flex justify-content-center mb-0 wow fadeInDown" data-wow-delay="0.3s">
                <li class="breadcrumb-item"><a href="/">首页</a></li>
                <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                <li class="breadcrumb-item active text-primary">正文</li>
            </ol>
        </div>
    </div>
    <!-- Header End -->
    <!-- FAQs Start -->
    <div class="container-fluid faq-section bg-light py-5">
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>前后端分离项目中后端开发需要写相应的接口，定义统一的返回格式有利于提高开发效率和沟通的成本。通常返回的格式主要如下两种：<br /> 1.&nbsp;&nbsp; &nbsp;只返回相应的状态，格式如下：</p> <pre><code>{ &nbsp; &nbsp; "code": "200", &nbsp; &nbsp; "msg": "SUCCESS" }</code></pre> <p>&nbsp;2.&nbsp;&nbsp; &nbsp;返回相应的状态及数据，格式如下：</p> <pre><code class="language-javascript">{ &nbsp; &nbsp; "code": "200", &nbsp; &nbsp; "msg": "查询成功", &nbsp; &nbsp; "result": { &nbsp; &nbsp; &nbsp; &nbsp; "id": 10, &nbsp; &nbsp; &nbsp; &nbsp; "name": "张三", &nbsp; &nbsp; &nbsp; &nbsp; "emil": "1234456@qq.com", &nbsp; &nbsp; &nbsp; &nbsp; "phone": null, &nbsp; &nbsp; &nbsp; &nbsp; "address": "测试地址" &nbsp; &nbsp; } }</code></pre> <p>&nbsp;状态代码定义如下：<br /> &nbsp; &nbsp;code : 请求处理状态</p> <ul> <li>&nbsp; &nbsp;&nbsp; &nbsp;200: 请求处理成功</li> <li>&nbsp; &nbsp;&nbsp; &nbsp;400: 请求处理失败</li> <li>&nbsp; &nbsp;&nbsp; &nbsp;500: 服务器内部错误</li> <li>&nbsp; &nbsp;&nbsp; &nbsp;401未认证（签名错误）</li> <li>&nbsp; &nbsp;&nbsp; &nbsp;404接口不存在</li> </ul> <p>Springboot中我们可以使用泛型来定义统一的返回结果：<br /> 1. 先定义只返回状态的Result</p> <pre><code class="language-java">package com.example.demo.base;  import com.alibaba.fastjson.JSON;  public class Result {     private String code;     private String msg;      public String getCode() {         return code;     }      public void setCode(String code) {         this.code = code;     }      public String getMsg() {         return msg;     }      public void setMsg(String msg) {         this.msg = msg;     }      @Override     public String toString() {         return JSON.toJSONString(this);     } }</code></pre> <p>定义即有数据又有返回状态的DateResult</p> <pre><code class="language-java">package com.example.demo.base;  import java.io.Serializable;  public class DateResult&lt;T&gt; extends Result implements Serializable {     private T result;      public T getResult() {         return (T) result;     }      public void setResult(T result) {         this.result = result;     }  }</code></pre> <p>定义响应码枚举</p> <pre><code class="language-java">package com.example.demo.base;  /**  * 响应码枚举  */ public enum ResultCode {     SUCCESS("200"), //成功     FAIL("400"), //失败     UNAUTHORIZED("401"), //未认证（签名错误）     NOT_FOUND("404"), //接口不存在     INTERNAL_SERVER_ERROR("500");//服务器内部错误      private final String code;      ResultCode(String code) {         this.code = code;     }      public String code() {         return code;     } }</code></pre> <p>&nbsp;在Controller类中使用方法如下：</p> <pre><code class="language-java">package com.example.demo.controller;  import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;  import com.example.demo.base.DateResult; import com.example.demo.base.Result; import com.example.demo.base.ResultCode; import com.example.demo.entity.User;  @RestController @RequestMapping("/user") public class UserController {     @PostMapping("/update")     public Result updateUser(@RequestParam Integer id) {         Result result = new Result();         //相应的逻辑更新逻辑......... 假如更新成功         result.setCode(ResultCode.SUCCESS.code());         result.setMsg("更新成功");         return result;     }      @RequestMapping("/detail")     public DateResult&lt;User&gt; queryUser(@RequestParam Integer id) {         User user = new User();         user.setId(10);         user.setName("张三");         user.setEmil("1234456@qq.com");         user.setAddress("测试地址");         DateResult&lt;User&gt; dateResult = new DateResult&lt;User&gt;();         dateResult.setCode(ResultCode.SUCCESS.code());         dateResult.setMsg("查询成功");         dateResult.setResult(user);         return dateResult;     } }</code></pre> <p>实体类User代码如下：</p> <pre><code class="language-java">package com.example.demo.entity;  import java.io.Serializable;  import com.alibaba.fastjson.JSON;  public class User implements Serializable {     private Integer id;     private String  name;     private String  emil;     private String  phone;     private String  address;      public Integer getId() {         return id;     }      public void setId(Integer id) {         this.id = id;     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public String getEmil() {         return emil;     }      public void setEmil(String emil) {         this.emil = emil;     }      public String getPhone() {         return phone;     }      public void setPhone(String phone) {         this.phone = phone;     }      public String getAddress() {         return address;     }      public void setAddress(String address) {         this.address = address;     }      @Override     public String toString() {         return JSON.toJSONString(this);     } }</code></pre> <p>先测试没有数据的返回格式，测试结果如下：</p> <p style="text-align:center;"><img decoding="async" alt="无数据的返回格式" src="http://img.555519.xyz/uploads3/20220820/b2ad81d65c25d1a6854994482fb4ba83.jpg"></p> <p>测试有返回数据的格式，测试结果如下：</p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220820/14ae42d1b0347a2344fca128d10ad03a.jpg"></p> <p>如上的返回结果，我们需要在controller类中每次都需要new一个返回对象比较麻烦，我们可以新建一个ResultUtil</p> <pre><code class="language-java">package com.example.demo.base;  /**  * 响应结果生成工具  */ public class ResultUtil {     private static final String DEFAULT_SUCCESS_MESSAGE = "SUCCESS";      public static Result genSuccessResult() {          Result result = new Result();         result.setCode(ResultCode.SUCCESS.code());         result.setMsg(DEFAULT_SUCCESS_MESSAGE);         return result;     }      public static &lt;T&gt; DateResult&lt;T&gt; genSuccessResult(T data) {         DateResult&lt;T&gt; dateResult = new DateResult&lt;T&gt;();         dateResult.setCode(ResultCode.SUCCESS.code());         dateResult.setMsg(DEFAULT_SUCCESS_MESSAGE);         dateResult.setResult(data);         return dateResult;     }  }</code></pre> <p>&nbsp;controller 类的代码修改如下：</p> <pre><code class="language-java">package com.example.demo.controller;  import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;  import com.example.demo.base.DateResult; import com.example.demo.base.Result; import com.example.demo.base.ResultUtil; import com.example.demo.entity.User;  @RestController @RequestMapping("/user") public class UserController {     @PostMapping("/update")     public Result updateUser(@RequestParam Integer id) {          return ResultUtil.genSuccessResult();     }      @RequestMapping("/detail")     public DateResult&lt;User&gt; queryUser(@RequestParam Integer id) {         User user = new User();         user.setId(10);         user.setName("张三");         user.setEmil("1234456@qq.com");         user.setAddress("测试地址");         return ResultUtil.genSuccessResult(user);     } }</code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-51746.htm">益康动物医院 益康动物医院电话</a></p>
                                        <p>下一个：<a href="/news/article-52288.htm">动物医院简介怎么写（动物医院简介百度文库）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-7-free-subscribe-node.htm" title="「11月7日」最高速度18.7M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「11月7日」最高速度18.7M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-40738.htm" title="卖宠物粮食的公司叫什么名字来着 卖宠物粮食的公司叫什么名字来着呢">卖宠物粮食的公司叫什么名字来着 卖宠物粮食的公司叫什么名字来着呢</a></li>
                        <li class="py-2"><a href="/news/article-37788.htm" title="做猫粮的机器多少钱一台（家用猫粮机器）">做猫粮的机器多少钱一台（家用猫粮机器）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-6-free-node-subscribe.htm" title="「1月6日」最高速度22.6M/S，2025年Pass Wall2每天更新免费机场订阅节点链接">「1月6日」最高速度22.6M/S，2025年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-38751.htm" title="vue-cli与webpack结合如何处理静态资源">vue-cli与webpack结合如何处理静态资源</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-17-node-share.htm" title="「12月17日」最高速度18.1M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「12月17日」最高速度18.1M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-23141.htm" title="饲料机器小型颗粒机220v家用（饲料机器 小型 颗粒机 220v 家用）">饲料机器小型颗粒机220v家用（饲料机器 小型 颗粒机 220v 家用）</a></li>
                        <li class="py-2"><a href="/news/article-29634.htm" title="成都宠物托运平台有哪些平台好（成都宠物运输比较可靠的公司）">成都宠物托运平台有哪些平台好（成都宠物运输比较可靠的公司）</a></li>
                        <li class="py-2"><a href="/news/article-43218.htm" title="Python——Fibonacci斐波那契数列的函数fib(n) 输出前20项（每项宽度5字符位置，右对齐），每行输出10个 递归和非递归实现">Python——Fibonacci斐波那契数列的函数fib(n) 输出前20项（每项宽度5字符位置，右对齐），每行输出10个 递归和非递归实现</a></li>
                        <li class="py-2"><a href="/news/article-24063.htm" title="狗粮品牌排行榜有哪些品牌的（狗粮排行榜简析十大狗粮品牌）">狗粮品牌排行榜有哪些品牌的（狗粮排行榜简析十大狗粮品牌）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">91</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- FAQs End -->
        <!-- Copyright Start -->
    <div class="container-fluid copyright py-4">
        <div class="container">
            <div class="row g-4 align-items-center">
                <div class="text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    Pass Wall2机场订阅官网 版权所有 Powered by WordPress
                </div>
            </div>
        </div>
    </div>
    <!-- Copyright End -->
    <!-- Back to Top -->
    <a href="#" class="btn btn-primary btn-lg-square rounded-circle back-to-top"><i class="fa fa-arrow-up"></i></a>
    <!-- JavaScript Libraries -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/wow/wow.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/waypoints/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/counterup/counterup.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/lightbox/js/lightbox.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/owlcarousel/owl.carousel.min.js"></script>
    <!-- Template Javascript -->
    <script src="/assets/website/js/frontend/passwall2/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>