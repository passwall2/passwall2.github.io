<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://passwall2.github.io/news/article-25915.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>STL之vector</title>
        <meta name="description" content="目录 vector概念 vector的遍历 1、[ ]的重载 2、迭代器 3、范围for vector的模拟实现 成员变量 reserve函数与拷贝构造 增删函数 push_back pop_back" />
        <link rel="icon" href="/assets/website/img/passwall2/favicon.ico" type="image/x-icon"/>
    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Inter:slnt,wght@-10..0,100..900&display=swap" rel="stylesheet">
    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <link href="https://cdn.bootcdn.net/ajax/libs/bootstrap-icons/1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Libraries Stylesheet -->
    <link rel="stylesheet" href="/assets/website/js/frontend/passwall2/animate/animate.min.css" />
    <link href="/assets/website/js/frontend/passwall2/lightbox/css/lightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/passwall2/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <!-- Customized Bootstrap Stylesheet -->
    <link href="/assets/website/css/passwall2/bootstrap.min.css" rel="stylesheet">
    <!-- Template Stylesheet -->
    <link href="/assets/website/css/passwall2/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-BD8TLG2ND4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-BD8TLG2ND4');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Spinner Start -->
    <div id="spinner" class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <!-- Spinner End -->
    <!-- Navbar & Hero Start -->
    <div class="container-fluid nav-bar px-0 px-lg-4 py-lg-0">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a href="/" class="navbar-brand p-0">
                    <span class="text-primary mb-0">Pass Wall2</span>
                </a>
                                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                    <span class="fa fa-bars"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarCollapse">
                    <div class="navbar-nav mx-0 mx-lg-auto">
                                                <a href="/" class="nav-item nav-link">首页</a>
                                                <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                                <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                                <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                                <a href="#" class="nav-item nav-link">关于</a>
                        <a href="#" class="nav-item nav-link">联系</a>
                    </div>
                </div>
            </nav>
        </div>
    </div>
    <!-- Navbar & Hero End -->

    <!-- Header Start -->
    <div class="container-fluid bg-breadcrumb">
        <div class="container text-center py-5" style="max-width: 900px;">
            <h1 class="text-white display-4 mb-4 wow fadeInDown" data-wow-delay="0.1s">STL之vector</h1>
            <ol class="breadcrumb d-flex justify-content-center mb-0 wow fadeInDown" data-wow-delay="0.3s">
                <li class="breadcrumb-item"><a href="/">首页</a></li>
                <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                <li class="breadcrumb-item active text-primary">正文</li>
            </ol>
        </div>
    </div>
    <!-- Header End -->
    <!-- FAQs Start -->
    <div class="container-fluid faq-section bg-light py-5">
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p id="main-toc"><strong>目录</strong></p> <p id="vector%E6%A6%82%E5%BF%B5-toc" style="margin-left:40px;"><a href="#vector%E6%A6%82%E5%BF%B5" rel="nofollow">vector概念</a></p> <p id="vector%E7%9A%84%E9%81%8D%E5%8E%86-toc" style="margin-left:40px;"><a href="#vector%E7%9A%84%E9%81%8D%E5%8E%86" rel="nofollow">vector的遍历</a></p> <p id="1%E3%80%81%5B%20%5D%E7%9A%84%E9%87%8D%E8%BD%BD-toc" style="margin-left:80px;"><a href="#1%E3%80%81%5B%20%5D%E7%9A%84%E9%87%8D%E8%BD%BD" rel="nofollow">1、[ ]的重载</a></p> <p id="2%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8-toc" style="margin-left:80px;"><a href="#2%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8" rel="nofollow">2、迭代器</a></p> <p id="3%E3%80%81%E8%8C%83%E5%9B%B4for-toc" style="margin-left:80px;"><a href="#3%E3%80%81%E8%8C%83%E5%9B%B4for" rel="nofollow">3、范围for</a></p> <p id="vector%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-toc" style="margin-left:0px;"><a href="#vector%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0" rel="nofollow">vector的模拟实现</a></p> <p id="%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F-toc" style="margin-left:40px;"><a href="#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F" rel="nofollow">成员变量</a></p> <p id="reserve%E5%87%BD%E6%95%B0%E4%B8%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0-toc" style="margin-left:40px;"><a href="#reserve%E5%87%BD%E6%95%B0%E4%B8%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0" rel="nofollow">reserve函数与拷贝构造</a></p> <p id="%E5%A2%9E%E5%88%A0%E5%87%BD%E6%95%B0-toc" style="margin-left:40px;"><a href="#%E5%A2%9E%E5%88%A0%E5%87%BD%E6%95%B0" rel="nofollow">增删函数</a></p> <p id="push_back-toc" style="margin-left:80px;"><a href="#push_back" rel="nofollow">push_back</a></p> <p id="pop_back-toc" style="margin-left:80px;"><a href="#pop_back" rel="nofollow">pop_back</a></p> <p id="%E8%BF%AD%E4%BB%A3%E5%99%A8-toc" style="margin-left:40px;"><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8" rel="nofollow">迭代器</a></p> <p id="%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD-toc" style="margin-left:40px;"><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD" rel="nofollow">运算符重载</a></p> <p id="%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6-toc" style="margin-left:80px;"><a href="#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6" rel="nofollow">赋值运算符</a></p> <p id="%5B%20%5D%E8%BF%90%E7%AE%97%E7%AC%A6-toc" style="margin-left:80px;"><a href="#%5B%20%5D%E8%BF%90%E7%AE%97%E7%AC%A6" rel="nofollow">[ ]运算符</a></p> <p id="%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0-toc" style="margin-left:40px;"><a href="#%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0" rel="nofollow">其他函数</a></p> <hr id="hr-toc"/> <p><img fetchpriority="high" decoding="async" alt="" height="203" src="http://img.555519.xyz/uploads3/20220722/b7efec10cd0fae79ce979dc3164d418a.jpg"></p> <h2 id="vector%E6%A6%82%E5%BF%B5">vector概念</h2> <p style="margin-left:0;">1、vector是表示<strong>可变大小数组</strong>的序列容器。</p> <p style="margin-left:0;">2、就像数组一样，vector也采用的连续存储空间来存储元素。也就是意味着可以采用下标对vector的元素进行访问，和数组一样高效。但是又不像数组，它的大小是可以动态改变的，而且它的大小会被容器自动处理。</p> <p style="margin-left:0;">3、本质讲，vector使用动态分配数组来存储它的元素。</p> <p style="margin-left:0px;text-align:justify;">4、vector分配空间策略：vector会分配一些额外的空间以适应可能的增长，因为<strong>存储空间比实际需要的存储空间更大</strong>。不同的库采用不同的策略权衡空间的使用和重新分配。但是无论如何，重新分配都应该是对数增长的间隔大小，以至于在末尾插入一个元素的时候是在常数时间的复杂度完成的。</p> <h2 id="vector%E7%9A%84%E9%81%8D%E5%8E%86">vector的遍历</h2> <pre><code class="language-cpp">vector&lt;int&gt; v; v.push_back(1); v.push_back(2); v.push_back(3); v.push_back(4);</code></pre> <h3 id="1%E3%80%81%5B%20%5D%E7%9A%84%E9%87%8D%E8%BD%BD">1、[ ]的重载</h3> <pre><code class="language-cpp">for (size_t i = 0; i &lt; v.size(); i++) { 	cout &lt;&lt; v[i] &lt;&lt; " "; }</code></pre> <h3 id="2%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8">2、迭代器</h3> <pre><code class="language-cpp">vector&lt;int&gt;::iterator it = v.begin(); while (it != v.end()) { 	cout &lt;&lt; *it &lt;&lt; " "; 	it++; } cout &lt;&lt; endl;</code></pre> <h3 id="3%E3%80%81%E8%8C%83%E5%9B%B4for">3、范围for</h3> <pre><code class="language-cpp">for (auto&amp; e : v) 	cout &lt;&lt; e; cout &lt;&lt; endl;</code></pre> </h1> <p>vector是一个类模板，参考stl3.0的写法</p> <h2 id="%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F">成员变量</h2> <p>库里面的写法</p> <p><img decoding="async" alt="" height="54" src="http://img.555519.xyz/uploads3/20220722/407b794e1e52de225bf765a0104d4b81.jpg"></p> <p>&nbsp;这里的iterator是被typdef了一下</p> <p><img decoding="async" alt="" height="205" src="http://img.555519.xyz/uploads3/20220722/3f0c0a3347089a86ec7bc9582dd4ade8.jpg"></p> <p>所以他的类型是 T*。传入int 就为int*，传入string就为string*。</p> <p>start用来标注数组的起点，finish用来标注数组有效长度的尾部，endofstorage标注数组的尾部。</p> <p>所以基本上的框架就是下面这样</p> <p><img loading="lazy" decoding="async" alt="" height="296" src="http://img.555519.xyz/uploads3/20220722/1ecdced8c79a03bc5ed15815e0be5bf4.jpg"></p> <pre><code class="language-cpp">template&lt;class T&gt; class myvector { public:     typedef T* iterator;     //--------构造函数---------     myvector() 	    :_start(nullptr) 	    ,_finish(nullptr) 	    ,_endofstorage(nullptr)     {}     ~myvector()     { 	    delete[] _start; 	    _start = nullptr; 	    _finish = nullptr; 	    _endofstorage = nullptr;     }  private: 	iterator _start; 	iterator _finish; 	iterator _endofstorage; };</code></pre> <h2 id="reserve%E5%87%BD%E6%95%B0%E4%B8%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0">reserve函数与拷贝构造</h2> <p>先谈谈reserve函数，因为插入元素首先是增容问题，自我感觉也是这个类的核心。</p> <p>先看一下下面的代码</p> <pre><code class="language-cpp">void reserve(size_t cap) { 	if (cap &gt; capacity()) 	{ 		size_t len = size(); 		T* tmp = new T[cap]; 		if (_start)//防止为空的时候增容 		{ 			memcpy(tmp, _start, len * sizeof(T));//拷贝 			delete[] _start;//释放原来的空间 		} 		_start = tmp; 		_finish = _start + len; 		_endofstorage = _start + cap; 	} }</code></pre> <p>当大于实际容量时，才增容，否则不增容。增容的逻辑就是开辟一块新容量的空间，将之前的内容拷贝过来（如果没有之前相等），然后更改对应的三个指针。</p> <p>上面的代码表面看着没什么问题，其实存在一个很严重的bug，那就是<strong>浅拷贝。</strong></p> <p style="text-align:justify;">memcpy 将_start内容拷贝到tmp里面，如果是基本类型的数据，还不会出bug，如果是自定义类型，就有可能会出错。例如string类型，string类型里面有一个char*类型的指针，该指针指向了一块堆上的空间，如果只是单独的把_start的内容拷贝给tmp中，则一旦释放掉_start，会调用string的析构函数，则tmp里面的内容都被析构了，代码会崩溃。</p> <p style="text-align:justify;">正确的方法</p> <pre><code class="language-cpp">void reserve(size_t cap) { 	if (cap &gt; capacity()) 	{ 		size_t len = size(); 		T* tmp = new T[cap]; 		if (_start) 		{ 			for (size_t i = 0; i &lt; len; i++) 			{ 				tmp[i] = _start[i];//调用类型T自带的赋值完成深拷贝 			} 			delete[] _start; 		} 		_start = tmp; 		_finish = _start + len; 		_endofstorage = _start + cap; 	}</code></pre> <p><strong>拷贝构造</strong></p> <pre><code class="language-cpp">myvector(const myvector&lt;T&gt;&amp; v)//深拷贝     :_start(nullptr)     ,_finish(nullptr)     ,_endofstorage(nullptr) { 	reserve(v.capacity()); 	for (size_t i = 0; i &lt; v.size(); i++) 	{ 		*_finish = v[i]; 		_finish++; 	} }</code></pre> <h2 id="%E5%A2%9E%E5%88%A0%E5%87%BD%E6%95%B0">增删函数</h2> <h3 id="push_back">push_back</h3> <p>尾插，如果_finish == endofstorage，则需要增容，注意刚开始为为空时的情况。</p> <pre><code class="language-cpp">void push_back(const T&amp; x) { 	if (_finish == _endofstorage) 	{ 		size_t newcapacity = capacity() == 0 ? 2 : capacity() * 2; 		reserve(newcapacity); 	} 	*_finish = x; 	_finish++; }</code></pre> <h3 id="pop_back">pop_back</h3> <p>尾删，在入口处判断是否合法，即_start&lt;_finish。</p> <pre><code class="language-cpp">void pop_back() { 	assert(_start &lt; _finish);//首先得判断是否为空数组 	_finish--; }</code></pre> <h2 id="%E8%BF%AD%E4%BB%A3%E5%99%A8">迭代器</h2> <p>vector的迭代器也比较简单，和string的类似。</p> <pre><code class="language-cpp">iterator begin() { 	return _start; } iterator end() { 	return _finish; } const_iterator begin() const//const迭代器 typedef const T* const_iterator; { 	return _start; } const_iterator end() const { 	return _finish; }</code></pre> <h2 id="%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD">运算符重载</h2> <h3 id="%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6">赋值运算符</h3> <pre><code class="language-cpp">const myvector&lt;T&gt;&amp; operator=(const myvector&lt;T&gt;&amp; v) { 	delete[] _start; 	_start = nullptr; 	_finish = nullptr; 	_endofstorage = nullptr;//先清除之前的内容，然后记得置空，不然重新开辟空间会出错 	reserve(v.capacity()); 	for (size_t i = 0; i &lt; v.size(); i++) 	{ 		*_finish = v[i]; 		_finish++; 	} 	return *this; }</code></pre> <p>现代写法思路一样，用swap函数，利用临时对象的特性，交换空间</p> <pre><code class="language-cpp">void swap(myvector&lt;T&gt;&amp; v) { 	std::swap(_start, v._start); 	std::swap(_finish, v._finish); 	std::swap(_endofstorage, v._endofstorage); }  myvector&lt;T&gt;&amp; operator=(myvector&lt;T&gt; v) { 	swap(v); 	return *this; }</code></pre> <h3 id="%5B%20%5D%E8%BF%90%E7%AE%97%E7%AC%A6">[ ]运算符</h3> <pre><code class="language-cpp">T&amp; operator[](size_t i) { 	assert(i &lt; size()); 	return _start[i]; } const T&amp; operator[](size_t i)const { 	assert(i &lt; size()); 	return _start[i]; }</code></pre> <h2 id="%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0">其他函数</h2> <pre><code class="language-cpp">size_t size()const//获取大小 { 	return _finish - _start; } size_t capacity()const//获取容量 { 	return _endofstorage - _start; } void resize(size_t n, const T&amp; val = T())//修改size的大小，分情况 { 	if (n &lt; size()) 	{ 		_finish -= size()-n; 	} 	else  	{	 		if (n &gt; capacity()) 		{ 			reserve(n); 		} 		size_t tmp = n - size(); 		while (tmp) 		{ 			*_finish = val; 			_finish++; 			tmp--; 		} 	} }</code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-25457.htm">动物医院英语短语怎么说呢 动物医院英语短语怎么说呢怎么写</a></p>
                                        <p>下一个：<a href="/news/article-25916.htm">猫咪领养协议书下载（宠物猫领养协议书）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-12-19-free-node-subscribe.htm" title="「12月19日」最高速度22.6M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「12月19日」最高速度22.6M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-27305.htm" title="让野猫抓了出血有事吗（被野猫咪抓了轻微出血了）">让野猫抓了出血有事吗（被野猫咪抓了轻微出血了）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-25-node-share-links.htm" title="「10月25日」最高速度22M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「10月25日」最高速度22M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-16-free-node-subscribe-links.htm" title="「9月16日」最高速度20.7M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「9月16日」最高速度20.7M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-23141.htm" title="饲料机器小型颗粒机220v家用（饲料机器 小型 颗粒机 220v 家用）">饲料机器小型颗粒机220v家用（饲料机器 小型 颗粒机 220v 家用）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-16-free-node-subscribe.htm" title="「12月16日」最高速度22.3M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「12月16日」最高速度22.3M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-10-node-share.htm" title="「12月10日」最高速度22.5M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「12月10日」最高速度22.5M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-4-node-share-links.htm" title="「11月4日」最高速度18.6M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「11月4日」最高速度18.6M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-24-free-node-subscribe-links.htm" title="「11月24日」最高速度22.2M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「11月24日」最高速度22.2M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-free-node-subscribe-links.htm" title="「11月30日」最高速度19.5M/S，2024年Pass Wall2每天更新免费机场订阅节点链接">「11月30日」最高速度19.5M/S，2024年Pass Wall2每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">7</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- FAQs End -->
        <!-- Copyright Start -->
    <div class="container-fluid copyright py-4">
        <div class="container">
            <div class="row g-4 align-items-center">
                <div class="text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    Pass Wall2机场订阅官网 版权所有 Powered by WordPress
                </div>
            </div>
        </div>
    </div>
    <!-- Copyright End -->
    <!-- Back to Top -->
    <a href="#" class="btn btn-primary btn-lg-square rounded-circle back-to-top"><i class="fa fa-arrow-up"></i></a>
    <!-- JavaScript Libraries -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/wow/wow.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/waypoints/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/counterup/counterup.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/lightbox/js/lightbox.min.js"></script>
    <script src="/assets/website/js/frontend/passwall2/owlcarousel/owl.carousel.min.js"></script>
    <!-- Template Javascript -->
    <script src="/assets/website/js/frontend/passwall2/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>